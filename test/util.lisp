(defpackage #:mahogany/test/util
  (:use :cl)
  (:export #:define-matrix))

(in-package #:mahogany/test/util)

(defun build-func-code (fn-name-string var-list body)
  (dolist (v var-list)
    (setf fn-name-string (concatenate 'string fn-name-string "-" (format nil "~A" v))))
  `(fiasco:deftest ,(intern fn-name-string) ()
      ,@body))

(defun %build-var-list (variables value-list)
  (alexandria:if-let ((cur-var (first variables)))
    (let* ((name (first cur-var))
	   (gathered (list)))
      (dolist (v (reverse (cdr cur-var)))
	(let ((new-values (list)))
	  (dolist (sublist (reverse value-list))
	    (push (cons (cons name v) sublist) new-values))
	  (alexandria:appendf gathered new-values)))
      (%build-var-list (cdr variables) gathered))
    value-list))

(defun build-var-list (vars)
  (let* ((reversed (reverse vars))
	 (innermost (first reversed))
	 (innermost-name (first innermost))
	 (innermost-values (cdr innermost))
	 (innermost-pairs (mapcar (lambda (x) (list (cons innermost-name x))) (reverse innermost-values))))
    (%build-var-list (cdr reversed) innermost-pairs)))

(defmacro define-matrix (name (&rest var-list) &body body)
  (let ((fn-name-string (symbol-name name))
	(var-list (build-var-list var-list))
	(instances (list)))
    (dolist (var-set var-list)
      (let ((def (build-func-code fn-name-string (mapcar #'cdr var-set) body)))
	(dolist (v var-set)
	  (setf def `(let ((,(car v) ,(cdr v)))
		       ,def)))
	(push def instances)))
    `(progn ,@instances)))
